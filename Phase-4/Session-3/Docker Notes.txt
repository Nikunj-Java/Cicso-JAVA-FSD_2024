*************************************************************************************
1.Create AWS UBUNTU Instance With Port No: 80,8080,Connect Using AWS CLI
*************************************************************************************
Step:1 INSTALL DOCKER
-------------------------------------------------------------------------------------
Link: https://docs.docker.com/engine/install/ubuntu/

# Add Docker's official GPG key:
> sudo apt-get update
> sudo apt-get install ca-certificates curl
> sudo install -m 0755 -d /etc/apt/keyrings
> sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
> sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
> echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
> sudo apt-get update
> sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin


STEP:2 DOCKER COMMANDS
--------------------------------------------------------------------------------------

- To check version: 
	> docker --version
- Running Container: 
	> sudo docker ps -a
- docker images: 
	> sudo docker images
- docker container: 
	> sudo docker container ls
- create container in detach mode: 
	> sudo docker run -d -p 80:80 docker/getting-started
- stop container: 
	> sudo docker stop name_of_container
- remove container: 
	> sudo docker rm -f name_of_container
- remove image: 
	> sudo docker rmi -f name_of image

*******************************************************************************************
EXERCISE:1  PULL THE READY IMAGES AVAILABLE FROM DOCKER REGISTRY
*******************************************************************************************
> sudo docker pull ubuntu

> sudo docker pull mysql

> sudo docker pull mysql:5.7
  

*****************************************************************************************
EXERCISE:2  PULL CUSTOM IMAGES (GIT HUB)
*****************************************************************************************
> git clone https://github.com/Nikunj-Java/docker_master.git
> ls (to check the availability of folders)
> cd docker_master


step:1 prepare image in docker container

> sudo docker build -t myimage .   (. is mendatory)

> sudo docker images

step2 : run the container

> sudo docker run -d --name mycontainer -p 80:80 myimage
> sudo docker runh -d -p 80:80 myimage

> sudo docker container ls
> curl local host


goto: browser> copy your aws instance ipv4add:80 +Enter

> you will see the out put in the browser


******************************************************************************************
EXERCISE: 3 PUSH THE IMAGES IN DOCKER HUB 
******************************************************************************************

> sudo docker tag myimage nikunj0510/cisco_image24
> sudo docker login
	> username:
	> password:  
	> else activate using browser and code
	Message: Successfully Logged In
goto> docker.com checj your repositories
new repository with the name "cisco_images24" will be prepared


******************************************************************************************
EXERCISE: 4 CREATING MYSQL DATABASE IN DOCKER CONTAINER
******************************************************************************************

> sudo docker pull mysql
> sudo docker images
> sudo docker  run --name my-app-db -e MY_ROOT_PASSWORD=password -d -p 3306:3306 mysql

install mysql-cli
> sudo apt update
> sudo apt install mysql-client
> mysql--version

goto>aws>copy public ipv4 add

> mysql -u root -h your_public_ipv4_add -P 3306 -p
	eg: sudo mysql -u root -h 35.175.137.206 -P 3306 -p
> password: password  (password will not be visible to you)

	if all is ok you will see mysql tab in the cmd
	that means we are ready to go and work with MYSQL on Docker Container
> show databses;

now you can  create databses and tables as per your needs


********************************************************************************************
EXERCISE: DOCKER-SWARM
********************************************************************************************
- It is an orchastartion management tool that runs on docker Applications

- it helps end-users in creating and deploying a cluster of docker nodes

- Each node of a docker swarm is a docker daemon , and all daemons interacts using DOCKER API

- Each container within the swarm can be deployed and accessed by the nodes of same  cluster

- if one of the container fails we can use the swarm to correct that failure

- it can reschedule containers on node failures

- manages multiple containers running on node failures

*********************************************************************************************
set the permissions

> sudo chmod  666 /var/run/docker.sock

STEP:1 INITIATE DOCKER SWARM
> sudo docker swarm init

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-3707mabv5gak8savuonyiulousoeqpau23o3p8w2no3zs2pixx-6060spztg2mpxwwj68iy6toxb 172.31.81.231:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.


STEP:2 CREATE SERVICE IN THIS DOCKER SWARM
> sudo docker service create -p 80:80 --name myservice myimage 
> check the output : curl localhost


STEP:3 SCALE DOCKER CONTAINER ON DOCKER SWARM
> sudo docker service scale myservice=3
> sudo docker service ls
> sudo docker service ps myservice 




